What happesn when you initialize a repository? Why do you need to do it?

When I initialize a repository with git init, I create a hidden .git directory
in that directory that will start saving my commits. I need to do it to save
commits in my repository. So I can easily backtrack my versions and/or find
bugs that I may have made throughout time.


How is the staging area different from the working directory and the 
repository? What value do you think it offers?

Staging area is a mid-ground where you may add files which would be included
in your next commit. Staging area allows me to commit specifically those files
I want to.


How can you use the staging area to make sure taht you have one commit per
logical change?

Stagin area is middle ground between the working directory and the repository.
When I make multiple logical changes in multiple files, I can use the staging
area to commit each of those changes separately or together if need be.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches would be helpful if I want to keep my project intact but also try to 
work on some other experimental parts in a separate line. Branches help me 
to do so by not editing the master branch files/commits. Later on I will be
able to merge those experimental branches back to the main branch.


How do the diagrams help you visualize the branch structure?

The diagrams visualize that if I were to choose an earlier commit and make
changes there and then commit the changes without starting a new branch. Then
that commit will not be accessible by older branches and the changes would
be lost.
The diagrams help you understand the branch hierarchy and accessibility.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When merging two branches together, git combines the commits from those
branches into a single (master)branch. The commits will be ordered by
timestamps.
By representing it in the diagram the way we do, we can see that the info
and changes of previos commits from both branches is accessible by the parent
commit.